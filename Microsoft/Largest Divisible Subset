class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n=nums.length;
        int[] dp=new int[n];
        return ldsSuq(nums,dp,ldsSize(nums,dp));
    }
    private int ldsSize(int[] nums, int[] dp)
    {
        Arrays.sort(nums);
        Arrays.fill(dp,1);
        int s=1;
        for(int i=1;i<nums.length;i++)
        {
           for(int j=0;j<i;j++)
           {
               if(nums[i]%nums[j]==0)
               {
                   dp[i]=Math.max(dp[i],dp[j]+1);
                   s=Math.max(s,dp[i]);
               }
           }
           
        }
        return s;
    }
    private ArrayList<Integer> ldsSuq(int[] nums,int[] dp,int s)
    {
        int p=-1;
        ArrayList<Integer> x=new ArrayList<Integer>();
        for(int i=dp.length-1;i>=0;i--)
        {
            if(dp[i]==s && (p==-1 || p%nums[i]==0))
            {
                x.add(0,nums[i]);
                s--;
                p=nums[i];
            }
        }
        return x;

    }
}
